# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

env:
  AZURE_SUBSCRIPTION: 300f35f7-1c6d-4a2d-ab1d-e9e50bbaa671

jobs:
  build:
    name: Build and Test

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 19
        id: setup-java-env
        uses: actions/setup-java@v3
        with:
          java-version: '19'
          distribution: 'temurin'
          cache: maven

      - name: Build and run tests
        run: mvn clean test
  
  sonarqube:
    name: Sonar Quality Check
    needs: [build]
    runs-on: ubuntu-latest
    steps:
    - name: Checking out
      uses: actions/checkout@master
      with:
        fetch-depth: 0
    - name: SonarQube Scan
      uses: kitabisa/sonarqube-action@v1.2.0
      with:
        host: ${{ secrets.SONARQUBE_HOST }}
        login: ${{ secrets.SONARQUBE_DEMO_API_TOKEN }}

  docker-build:
    name: Docker Push
    needs: [sonarqube]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        name: Check out code

      - name: Set up JDK 19
        id: steup-java-env
        uses: actions/setup-java@v3
        with:
          java-version: '19'
          distribution: 'temurin'
          cache: maven

      - name: create package with maven
        run: |
          mvn clean package -DskipTests

      - uses: mr-smithers-excellent/docker-build-push@v5
        name: Build & push Docker image
        with:
          image: demo-api
          tags: v1.0,latest
          registry: myconreg2134.azurecr.io
          dockerfile: Dockerfile
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

  deploy-dev:
    name: Deploy to Dev
    needs: [ docker-build ]
    runs-on: ubuntu-latest
    environment:
      name: Dev

    steps:
      - name: Login via Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy Custom Image
        uses: Azure/spring-apps-deploy@v1
        with:
          azure-subscription: ${{ env.AZURE_SUBSCRIPTION }}
          action: deploy
          service-name: spring-apps-2134
          app-name: demo-api
          container-registry: myconreg2134.azurecr.io
          registry-username: ${{ secrets.REGISTRY_USERNAME }}
          registry-password: ${{ secrets.REGISTRY_PASSWORD }}
          container-image: demo-api
          use-staging-deployment: false
          package: ${{ github.workspace }}

  deploy-qa:
    name: Deploy to QA
    if: github.event.ref == 'refs/heads/main'
    needs: [ docker-build ]
    runs-on: ubuntu-latest
    environment:
      name: QA
    steps:
      - name: Deploy
        run: echo qa deploy

  deploy-prod:
    name: Deploy to Prod
    needs: [ deploy-qa ]
    runs-on: ubuntu-latest
    environment:
      name: Prod
    steps:
      - name: Deploy
        run: echo prod deploy
